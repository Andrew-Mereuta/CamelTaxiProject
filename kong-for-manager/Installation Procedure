 kubectl create secret generic kong-session-config --from-file=admin_gui_session_conf --from-file=portal_session_conf
 kubectl create secret generic kong-enterprise-license --from-file=license=./license.json
 kubectl create secret generic kong-enterprise-superuser-password --from-literal=password=pass
 helm install kong-ee kong/kong --values=kong-enterprise-full-k4k8s.yml
 kubectl port-forward deploy/kong-ee-kong 8001:8001
 localhost:32080/
 ------------------------------------------------------------------------------------------------------------------------------------------------------------
 kubectl apply -f ./secretMap.yaml
 kubectl apply -f ./config-map.yaml
 kubectl apply -f ./persistent-volume.yaml
 sleep(40)
 kubectl apply -f ./camel-deploy-no-ingress.yaml
 -------------------------------------------------------------------------------------------------------------------------------------------------------------
 kubectl get svc --all-namespaces
 Find camel-project-service, look at its port (for example port is 9000, we will use it for URL)
 -> in Kong Manager create Service with URL: http://camel-project-service:9000/api
 -> Add Route to this service, does not matter how you will call it, make sure to add path and in the empty slot write: \
 -> Access your api by this example URL: GET localhost:81/clients
 -> To check that you accessed your api via Kong, look at response headers, you should see smth like: X-Kong-Proxy-Latency (and other similar)

* Now we can start adding plugins
 First of all, go to tab plugins and add JWT plugin (leave all fields as they are)
 Secondly, got ot tab consumer and create consumer with the following fields: username: camel-project-consumer; custom id: camel-project-id
 Note: the values for this field you create with your imagination, there is no specific pattern
 Next, choose consumer, which you just created -> go to tab credentials -> add JWT credential -> fill empty fields: key: apikey; secret: secret
 Note: the values for this field you create with your imagination, there is no specific pattern
 To generate JWT find this website: https://jwt.io/
 In our case fill the payload like this: { "iss" : "apikey" }
 And for 'Verify signature' part, insert value: secret
 Use to token to authorize.

* Add OAS document
 First of all, go to tab Dev Portal and enable it.
 Secondly, you have to port-forward kong-ee-kong-portal. In terminal write: kubectl port-forward svc/kong-ee-kong-portal 8003:8003
 Dev portal is working, you can access it. But before got to services, choose the one you created and add there a document which is
 stored in this project in the folder kong-yaml-doc
 When you access dev portal, you should see there Taxi Project tab (if dont, try to refresh)
 You have to write one more command in terminal: kubectl port-forward svc/kong-ee-kong-portalapi 8004:8004
 Now you can use Taxi Project document. There you can try out endpoints. I recommend to try out /clients endpoint.
 Press 'Try it out' button, then execute. You should see TypeError: ...
 Kong protects api from browser to access it, this can be changed -> go to Kong Manager -> Plugins -> CORS (this is name of plugin)
 Enable it and in the last field, namely Config.Origins enter: http://127.0.0.1:8003
 If you try out the endpoint again, you should get 401 unauthorized response. This is because you have not included JWT token,
 but at least it works fine.

* Non-authentication plugin
 Plugins -> New plugin -> Rate limiting advanced -> choose the service for which you will apply this plugin
 -> fill the following fields:
    Config.Limit: 5
    Config.Sync Rate: 10
    Config.Window Size: 60
 -> this will allow only 5 request per minute
 If you want to test this plugin, try to send one request, you will see, that in response headers there are new fields,
 for example: RateLimit-Limit (should be with value 5)
 -------------------------------------------------------------------------------------------------------------------------------------------------------------
 kubectl delete -f ./secretMap.yaml
 kubectl delete -f ./config-map.yaml
 kubectl delete -f ./persistent-volume.yaml
 kubectl delete -f ./camel-deploy-no-ingress.yaml
 helm delete kong-ee

 Again, I recommend to reset Kubernetes cluster